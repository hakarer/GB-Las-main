from asyncio import sleep
from vkbottle import (
    API, Callback, GroupEventType, GroupTypes, KeyboardButtonColor,
    Text, OpenLink, Keyboard, ShowSnackbarEvent, VKAPIError, ErrorHandler,
) 
from vkbottle.user import User, Message, Blueprint
from vkbottle.dispatch.rules.base import (
    CommandRule, ChatActionRule, FromPeerRule, RegexRule,
)
from loguru import logger
from sympy import symbols, Eq, solve, sympify
from vkbottle import CaptchaError
import re
from transliterate import translit
import asyncio
import vkbottle
from transliterate import translit
from random import randint
from datetime import datetime
from dateutil.relativedelta import relativedelta
import vk_api
import json
import io
from vkbottle.dispatch.rules.base import CommandRule
from vk_api.vk_api import VkApi
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.exceptions import VkApiError
from io import BytesIO
import labeler
import time
from vkbottle.bot import BotLabeler
from vkbottle import Bot
from datetime import timedelta
import base64
from googletrans import Translator
import random, requests
from vkbottle.bot import Blueprint, Message
from vk_api.upload import VkUpload
from typing import Optional
import requests
from bs4 import BeautifulSoup
from vk_api.utils import get_random_id
import pyperclip
from typing import List

import webbrowser
import asyncio
import aiohttp
import orjson

from    os    import  system
from   time   import   time   as unixtime
from datetime import datetime

from pick import  pick
from pick import Option

from vkbottle import API
from vkbottle import User
from vkbottle.user import Message

from vkbottle_types.responses.users    import UsersUserFull
from vkbottle_types.responses.messages import MessagesMessage

from loguru import logger 



import aiohttp
import asyncio
import ssl
import certifi
import ssl

# Disabling SSL verification (not recommended for production)
ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE





#–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤–∫
from loguru import logger
logger.disable("vkbottle")
bp = Blueprint()
users = []
translator = Translator()
YOUR_USER_ID = 272730292


bl = BotLabeler()
connected_users = {}
TOKEN = API
vk_session = vk_api.VkApi(token=TOKEN)
vk = vk_session.get_api()
# –°–æ–∑–¥–∞–π—Ç–µ Blueprint –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
add_user_bp = Blueprint()

# –°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è API —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_tokens = {}
YOUR_API_TOKEN = API
#–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–ø–∏
api = API(token='vk1.a.w6kQa_xr6GcXMIDft5_4AWva2cK_rXeESQJvFrt_zagHCRHOGU_55UOJ86ci9Yrre1Wbe6PC_-Ne32L7xdPYnOmmtSWZl1W8DqlPlBWWla_2hKoEqUL-IOPNE--uQ6P512ny6-E3ywj8ZXj_1QEZ-pOBCFBK2rbM6J-R_mcyFgqJ8t27PxoyXcnU4HSNA635Vuygv4FqnqKX8C_ev_JgYg')
bp = User()

#—Å–æ–∑–¥–∞–Ω–∏–µ —é–∑–µ—Ä–∞
user = User(api=api)
#—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä —Ç–µ–∫—Å—Ç–∞
user.labeler.vbml_ignore_case = True
#–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –∞–π–¥–∏
MAIN_ID= 272730292



TEMPLATE_FILE = "templates.json"


#–ê–≤—Ç–æ–∫–∞–ø—á–∞, –æ—Ç–∫–ª—é—á–∏–ª –ø–æ–∫–∞ —á—Ç–æ, –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞–µ–º
# async def captcha_handler(e: CaptchaError) -> str:
#     code, accuracy = solver.solve(url=e.img, minimum_accuracy=0.40, repeat_count=14)
#     await sleep(5)
#     logger.warning(f"—Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ \ncaptcha: {e.img}\t| solving: {code} \t| accuracy: {accuracy}")
#     return code






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–∞
def get_gender_string(sex):
    if sex == 1:
        return '–ñ–µ–Ω—Å–∫–∏–π'
    elif sex == 2:
        return '–ú—É–∂—Å–∫–æ–π'
    else:
        return '–ù–µ —É–∫–∞–∑–∞–Ω'

def format_account_age(delta):
    years, months, days = delta.years, delta.months, delta.days
    hours = delta.hours

    if days == 1:
        days_text = "1 –¥–µ–Ω—å"
    elif days % 10 in {2, 3, 4} and days not in {12, 13, 14}:
        days_text = f"{days} –¥–Ω—è"
    else:
        days_text = f"{days} –¥–Ω–µ–π"

    if hours == 1:
        hours_text = "1 —á–∞—Å"
    elif hours % 10 in {2, 3, 4} and hours not in {12, 13, 14}:
        hours_text = f"{hours} —á–∞—Å–∞"
    else:
        hours_text = f"{hours} —á–∞—Å–æ–≤"

    years_text = f"{years} {'–≥–æ–¥' if years == 1 else '–≥–æ–¥–∞' if 2 <= years <= 4 else '–ª–µ—Ç'}"
    months_text = f"{months} {'–º–µ—Å—è—Ü' if months == 1 else '–º–µ—Å—è—Ü–∞' if 2 <= months <= 4 else '–º–µ—Å—è—Ü–µ–≤'}"

    age_text = f"{years_text} {months_text} {days_text}."

    return age_text

def format_timedelta(delta):
    days = delta.days
    hours, remainder = divmod(delta.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    if days > 0:
        return f"{days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"
    elif hours > 0:
        return f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"
    elif minutes > 0:
        return f"{minutes} –º–∏–Ω—É—Ç"
    else:
        return f"{seconds} —Å–µ–∫—É–Ω–¥"

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "gb –ø—Ä–æ–≤–µ—Ä—å –∞–π–¥–∏"






@user.on.message(text=["gb –∏–Ω—Ñ–æ", "–≥–± –∏–Ω—Ñ–æ", "<–≤–∞—à_–ø—Ä–µ—Ñ–∏–∫—Å> –∏–Ω—Ñ–æ"])
async def remove_trusted_33user(message: Message):
   command_prefixes = ["gb", "–≥–±", "<–≤–∞—à_–ø—Ä–µ—Ñ–∏–∫—Å>"]
   if message.from_id == MAIN_ID:
 # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞
       prefixes = load_prefixes()
       user_prefixes = prefixes.get(str(message.from_id), ["gb"])  # –ï—Å–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º "gb" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
   for prefix in user_prefixes + command_prefixes:
      if message.text.startswith(prefix + " –∏–Ω—Ñ–æ"):

        try:
            if message.reply_message:
                user_id = message.reply_message.from_id
            else:
                user_id = message.from_id

            user_info = await api.users.get(
                user_ids=user_id,
                fields=['online', 'last_seen', 'photo_max', 'screen_name', 'sex', 'city', 'bdate', 'music', 'video', 'followers_count', 'is_closed', 'counters']
            )

            user_data = user_info[0]
            user_name = f"{user_data.first_name} {user_data.last_name}"
            user_screen_name = user_data.screen_name
            user_sex = get_gender_string(user_data.sex)
            user_city = user_data.city
            user_city_title = user_city.title if user_city else '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'
            user_bdate = user_data.bdate if 'bdate' in user_data else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

            if hasattr(user_data.counters, 'videos'):
                user_video_count = user_data.counters.videos
            else:
                user_video_count = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

            if hasattr(user_data.counters, 'photos'):
                user_photos_count = user_data.counters.photos
            else:
                user_photos_count = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

            if hasattr(user_data.counters, 'friends'):
                friends_count = user_data.counters.friends
            else:
                friends_count = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
                
            user_info = await api.users.get(
                user_ids=user_id,
                fields=['activity', 'counters', 'followers_count', 'last_seen'],
            )
            user_data = user_info[0]

            user_status = getattr(user_data, 'activity', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–µ')

            sticker_packs_count = user_data.activity.stickers if hasattr(user_data.activity, 'stickers') else 0

            if sticker_packs_count == 0:
                counters = user_data.counters
                sticker_packs_count = counters.sticker_packs if hasattr(counters, 'sticker_packs') else 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö
            if hasattr(counters, 'gifts') and counters.gifts is not None:
                gifts_count = counters.gifts
            else:
                gifts_count = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö —Å–∫—Ä—ã—Ç–∞.'

            followers_count = getattr(user_data, 'followers_count', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

            last_seen = user_data.last_seen
            if user_data.online:
                online_status = "üü¢ –û–Ω–ª–∞–π–Ω"
                if last_seen and last_seen.platform:
                    online_device = last_seen.platform
                    if online_device == 1:
                        device_name = "—Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ üì±"
                    elif online_device == 2:
                        device_name = "—Å iPhone üì±"
                    elif online_device == 3:
                        device_name = "—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ üñ•Ô∏è"
                    else:
                        device_name = "—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ üìµ"
                    online_status += f" {device_name}"
                last_seen_str = ""
            else:
                online_status = "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
                if last_seen and last_seen.time:
                    last_seen_time = datetime.utcfromtimestamp(last_seen.time)
                    now = datetime.utcnow()
                    time_difference = now - last_seen_time
                    last_seen_str = (
                        f"–≤ —Å–µ—Ç–∏: {last_seen_time.strftime('%Y-%m-%d %H:%M:%S')} "
                        f"‚îú‚îÄ {format_timedelta(time_difference)} –Ω–∞–∑–∞–¥"
                    )
                else:
                    last_seen_str = "–ë—ã–ª –≤ —Å–µ—Ç–∏ –¥–∞–≤–Ω–æ"

            sticker_packs_count = user_data.activity.stickers if hasattr(user_data.activity, 'stickers') else 0

            if sticker_packs_count == 0:
                counters = user_data.counters
                sticker_packs_count = counters.sticker_packs if hasattr(counters, 'sticker_packs') else 0

                    
            bot_info = await api.users.get(
                user_ids=message.from_id
            )
            bot_data = bot_info[0]
            bot_id = bot_data.id

            is_bot_connected = user_id == bot_id
            

            response = requests.get(f'https://vk.com/foaf.php?id={user_id}')
            xml = response.text
            soup = BeautifulSoup(xml, 'lxml')
            created = soup.find('ya:created').get('dc:date')

            created_date = datetime.strptime(created, "%Y-%m-%dT%H:%M:%S%z")
            formatted_created_date = created_date.strftime("%Y.%m.%d –≤ %H:%M –º—Å–∫")

            response = requests.get(f'https://vk.com/foaf.php?id={user_id}')
            xml = response.text
            soup = BeautifulSoup(xml, 'lxml')
            created = soup.find('ya:created').get('dc:date')

            created_date = datetime.strptime(created, "%Y-%m-%dT%H:%M:%S%z")
            created_date = created_date.replace(tzinfo=None)

            delta = relativedelta(datetime.now(), created_date)
            total_days = delta.years * 365 + delta.months * 30 + delta.days

            account_age = format_account_age(delta)

            response_message = f"‚öô –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {user_name} :\n\n"
            
            response_message += f"üÄÑ ID: {user_id}\n"
            response_message += f"üïâ –°—Å—ã–ª–∫–∞: {user_screen_name}\n"
            response_message += f"\nüà∫ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {user_data.followers_count - friends_count if user_data.followers_count is not None else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"

            response_message += f"\n‚Äª –¢–∏–ø –ü—Ä–æ—Ñ–∏–ª—è: {'–ó–∞–∫—Ä—ã—Ç—ã–π' if user_data.is_closed else '–û—Ç–∫—Ä—ã—Ç—ã–π'}\n"
            response_message += f"‚Äª –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π: {friends_count}\n"

            response_message += f"\nü™™ –ü–æ–ª: {user_sex}\n"
            response_message += f"üåÅ –ì–æ—Ä–æ–¥: {user_city_title}\n"

            response_message += f"\n‚Äª –í–∏–¥–µ–æ: {user_video_count}\n"
            response_message += f"‚Äª –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {user_photos_count}\n"

            response_message += f"\n‚Äª –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {formatted_created_date}\n"
            response_message += f"‚Äª –ê–∫–∫–∞—É–Ω—Ç—É: {account_age} ({total_days} –¥–Ω–µ–π {delta.hours} —á–∞—Å–æ–≤).\n"
            response_message += f"‚Äª –°—Ç–∞—Ç—É—Å:\n‚Äπ‚Äπ\n{user_status}\n‚Äî‚Äî‚Äî‚Ä∫‚Ä∫\n"

            response_message += f"\nüéÅ –ü–æ–¥–∞—Ä–∫–∏: {gifts_count}\n"

            response_message += f"\n‚©ê GB: {'‚úÖ' if is_bot_connected else '‚úñÔ∏è'}\n"


            try:
                photo_info = await api.photos.get(
                    owner_id=user_id,
                    album_id='profile',
                    rev=1,
                    count=1,
                    photo_sizes=1,
                )
                
                if photo_info.count > 0:
                    random_id = int(time.time() * 1000)
                    attachment = [f"photo{photo_info.items[0].owner_id}_{photo_info.items[0].id}"]
                else:
                    attachment = []
                
            except VKAPIError as e:
                if "This profile is private" in str(e):
                    attachment = []
                else:
                    raise

            await api.messages.edit(
                peer_id=message.peer_id,
                conversation_message_id=message.conversation_message_id,
                message=response_message,
                attachment=attachment, 
            )
            
        except VKAPIError as e:
            if "This profile is private" in str(e):
                response_message = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º, –∏ –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
                await api.messages.send(
                    peer_id=message.peer_id,
                    message=response_message
                )
            else:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ VK API: {e}")


################################################################################




@user.on.message(text=["<prefix> –ø–∏–Ω–≥"])
async def ping_pong(message: Message, prefix):
    user_prefixes = load_prefixes().get(str(message.from_id), [])
    default_prefixes = ["gb", "–≥–±"]

    if prefix.lower() in user_prefixes + default_prefixes: 
    
     if message.from_id == YOUR_USER_ID:       
        current_time = datetime.now()
        response_time = (current_time - datetime.fromtimestamp(message.date)).total_seconds()

        response_text = (
            f' –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –ó–∞ {response_time:.2f} —Å–µ–∫—É–Ω–¥.\n'
            f' –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ó–∞ {response_time * 5:.2f} —Å–µ–∫—É–Ω–¥.\n'
            f' –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –ó–∞ {response_time * 2:.2f} —Å–µ–∫—É–Ω–¥.\n'
            f' –£–¥–∞–ª–µ–Ω–æ –ó–∞ {response_time * 3:.2f} —Å–µ–∫—É–Ω–¥. '
        )
        
        await api.messages.edit(
            peer_id=message.peer_id,
            conversation_message_id=message.conversation_message_id,
            message=response_text
        )
################################################################################

@user.on.message(text=['<prefix> –∞–π–¥–∏'])
async def check_user_id(message: Message, prefix):
    user_id = None

    if message.from_id == MAIN_ID:
        user_prefixes = load_prefixes().get(str(message.from_id), [])
        default_prefixes = ["gb", "–≥–±"]
        
        if prefix and prefix.lower() in user_prefixes + default_prefixes:
           
            if message.reply_message:
                user_id = message.reply_message.from_id
                user_link = f"[id{user_id}|id –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ]"
            else:
                user_id = message.from_id
                user_link = f"[id{user_id}|–•–æ–∑—è–∏–Ω, –í–∞—à id ]"

    if user_id:
        response_message = f"{user_link} : {user_id}"
        await api.messages.edit(
            peer_id=message.peer_id,
            conversation_message_id=message.conversation_message_id,
            message=response_message
        )
    else:
        await message.answer("–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        


@user.on.message(text=['<prefix> –ø—Ä–æ–≤–µ—Ä—å –∞–π–¥–∏'])
async def check_user_id(message: Message, prefix):
    user_id = None

    if message.from_id == MAIN_ID:
        user_prefixes = load_prefixes().get(str(message.from_id), [])
        default_prefixes = ["gb", "–≥–±"]
        
        if prefix and prefix.lower() in user_prefixes + default_prefixes:
           
            if message.reply_message:
                user_id = message.reply_message.from_id
                user_link = f"[id{user_id}|id –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ]"
            else:
                user_id = message.from_id
                user_link = f"[id{user_id}|–•–æ–∑—è–∏–Ω, –í–∞—à id ]"

    if user_id:
        response_message = f"{user_link} : {user_id}"
        await api.messages.edit(
            peer_id=message.peer_id,
            conversation_message_id=message.conversation_message_id,
            message=response_message
        )
    else:
        await message.answer("–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

##################################################################################



@user.on.message(text="gb –ø—Ä–æ–≤–µ—Ä–∫–∞")
async def check_user_chats(message: Message):
    if message.from_id != YOUR_USER_ID:
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ—Å–µ–¥—ã
    if message.reply_message:
        other_user_id = message.reply_message.from_id
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –±–µ—Å–µ–¥—ã.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–µ—Å–µ–¥, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        response = await bp.api.messages.getConversations(count=200)
        current_user_chats = response.items

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–∏—Ö –±–µ—Å–µ–¥–∞—Ö
        common_chats = []
        for chat in current_user_chats:
            chat_id = chat.peer_id
            chat_info = await bp.api.messages.getConversationById(conversation_ids=chat_id)
            
            if chat_info.conversations[0].chat_settings.users:
                members = chat_info.conversations[0].chat_settings.users
                if other_user_id in members:
                    common_chats.append(chat_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if common_chats:
            response_message = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –±–µ—Å–µ–¥, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –æ–±–∞ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å:\n"
            for chat_id in common_chats:
                response_message += f"–ß–∞—Ç ID: {chat_id}\n"
        else:
            response_message = "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ–±—â–∏—Ö –±–µ—Å–µ–¥–∞—Ö —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."

        await message.answer(response_message)

    except VKAPIError as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ VK API: {e}")

########################################################################################

@user.on.message(text=["<prefix> —Ä–µ—à–∏ <expression>"])
async def solve_expression(message: Message, expression, prefix: str):
    user_prefixes = load_prefixes().get(str(message.from_id), [])
    default_prefixes = ["gb", "–≥–±"]

    if prefix.lower() in user_prefixes + default_prefixes:    


     if message.from_id == MAIN_ID:
        try:
            expression = expression.replace("^", "**")
            
            result = eval(expression)
            await api.messages.edit(
                peer_id=message.peer_id,
                conversation_message_id=message.conversation_message_id,
                message=f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
            )
        except Exception as e:
            await api.messages.edit(
                peer_id=message.peer_id,
                conversation_message_id=message.conversation_message_id,
                message="–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
            )

########################################################################################
            
@user.on.message(text=["<prefix> —Ä–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è <equation>"])
async def –ø—Ä–∏–º–µ—Ä—ã(message: Message, equation, prefix: str):
    user_prefixes = load_prefixes().get(str(message.from_id), [])
    default_prefixes = ["gb", "–≥–±"]

    if prefix.lower() in user_prefixes + default_prefixes: 
    
     if message.from_id == MAIN_ID:
        try:
            # –ó–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å—Ç–µ–ø–µ–Ω–∏
            equation = equation.replace("^", "**")

            # –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è
            x = symbols('x')

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —É—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç SymPy
            equation_sympy = Eq(eval(equation.replace("‚Äì", "-")), 0)

            # –†–µ—à–∞–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ
            solutions = solve(equation_sympy, x)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            result_str = "üî¢ –†–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è:"
            for i, solution in enumerate(solutions):
                result_str += f"\n{x} = {solution}"

            await api.messages.edit(
                peer_id=message.peer_id,
                conversation_message_id=message.conversation_message_id,
                message=result_str
            )
        except Exception as e:
            await api.messages.edit(
                peer_id=message.peer_id,
                conversation_message_id=message.conversation_message_id,
                message="–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç —Ä–µ—à–µ–Ω–∏–π"
            )

########################################################################################            



@user.on.message(text='<prefix> –ø–µ—Ä–µ–≤–µ–¥–∏')
async def translate_text(message: Message, prefix):
   if message.from_id == MAIN_ID:
    user_prefixes = load_prefixes().get(str(message.from_id), [])
    default_prefixes = ["gb", "–≥–±"]

   if prefix.lower() in user_prefixes + default_prefixes: 
   
    try:
        text_to_translate = ""


        if message.reply_message and message.reply_message.text:
            text_to_translate = message.reply_message.text
        else:

            match = re.search(r'gb –ø–µ—Ä–µ–≤–µ–¥–∏ (.+)', message.text)
            if match:
                text_to_translate = match.group(1)

        if text_to_translate:

            source_lang = 'ru' if re.search('[–∞-—è–ê-–Ø]', text_to_translate) else 'en'
            target_lang = 'en' if source_lang == 'ru' else 'ru'

            translated_text = translator.translate(text_to_translate, src=source_lang, dest=target_lang)

            response_message = f"–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞:\n{translated_text.text}"
        else:
            response_message = "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã 'gb –ø–µ—Ä–µ–≤–µ–¥–∏' –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞."


        await api.messages.edit(
            peer_id=message.peer_id,
            message_id=message.id,
            message=response_message
        )
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}") 
        
   user_prefixes = []   


@user.on.message(text='<prefix> –ø–µ—Ä–µ–≤–æ–¥ <text>')
async def translate_text(message: Message, text, prefix: str):
    main_id = MAIN_ID  
    if message.from_id == MAIN_ID:
        user_prefixes = load_prefixes().get(str(main_id), [])
        default_prefixes = ["gb", "–≥–±"]

    if message.from_id == main_id and prefix.lower() in user_prefixes + default_prefixes:
   
   
        try:
            random_id = random.getrandbits(31)        
            source_lang = 'ru' if re.search('[–∞-—è–ê-–Ø]', text) else 'en'
            target_lang = 'en' if source_lang == 'ru' else 'ru'
            translated_text = translator.translate(text, src=source_lang, dest=target_lang)
            response_message = f"–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞:\n{translated_text.text}"     
            await api.messages.delete(message_ids=message.id, delete_for_all=0)  
      
            sent_message = await api.messages.send(
                peer_id=message.peer_id,
                message=response_message,
                random_id=random_id  
            )
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

######################################################################################################
@user.on.message(text="gb —Å–ø–∏—Å–æ–∫")
async def c–≤s(message: Message):
    if message.reply_message:
        text = message.reply_message.text
    else:
        await user.api.messages.edit(
            peer_id=message.peer_id,
            message_id=message.id,
            message="—Ç—ã –ª–æ—Ö"
        )
        return
    items = re.split(r',\s*(?![^()]*\))', text)
    numbered_list = "\n".join([f"{i + 1}. {item}" for i, item in enumerate(items)])
    numbered_list = re.sub(r'([^\.])$', r'\1.', numbered_list, flags=re.MULTILINE)

    await user.api.messages.edit(
        peer_id=message.peer_id,
        message_id=message.id,
        message=numbered_list
    )

######################################################################################################

COOLDOWN_DURATION = 5
last_response_time = {}
@user.on.message(text=["–Ø—Ä–∞"])
async def —è—Ä–∞(message: Message):
    user_id = str(message.from_id)
    if user_id not in last_response_time or (
        datetime.now() - last_response_time[user_id]
    ) > timedelta(seconds=COOLDOWN_DURATION):
        last_response_time[user_id] = datetime.now()
        sticker_ids = [93905, 93953, 93858, 92924, 91087, 94355, 93174, 87171, 91746, 6310, 92326]
        random_sticker_id = random.choice(sticker_ids)
        await api.messages.send(
                peer_id=message.peer_id,
                random_id=0,
                sticker_id=random_sticker_id
            )

######################################################################################################

#############################################################################################################################################
@user.on.message(text="gb –º–µ–≥–∞–ø—É—à <name>")
async def megapush(message: Message, name: str):
    if message.from_id == YOUR_USER_ID:
        chat_members = await user.api.messages.get_conversation_members(peer_id=message.peer_id)
        tag_message = message.text.split("–≥–µ–π", 1)[-1].strip()

        mentions = []

        for member in chat_members.items:
           
            if member.member_id > 0: 
                mentions.append(f"[id{member.member_id}|{name}]")
                
        result_message = f"{', '.join(mentions)}. {tag_message}"
        max_message_length = 4096  
        message_parts = [result_message[i:i + max_message_length] for i in range(0, len(result_message), max_message_length)]
        for i, part in enumerate(message_parts, 1):
            await user.api.messages.edit(
                peer_id=message.peer_id,
                conversation_message_id=message.conversation_message_id,
                message=part
            )


#######################
            

@user.on.message(text="gb –ø—É—à <name>")
async def online_push(message: Message, name: str):
    if message.from_id == YOUR_USER_ID:
        chat_info = await user.api.messages.get_conversations_by_id(peer_ids=message.peer_id, extended=1)
        
        if chat_info.items:
            chat = chat_info.items[0]    
            chat_id = chat.peer.id
            chat_members = await user.api.messages.get_conversation_members(peer_id=chat_id)
          
            online_mentions = []
            for member in chat_members.profiles:
                if member.online:
                    online_mentions.append(f"[id{member.id}|{name}]")

            if online_mentions:
                mentions_str = ", ".join(online_mentions)
                await user.api.messages.edit(
                    peer_id=message.peer_id,
                    conversation_message_id=message.conversation_message_id,
                    message=mentions_str + "."
                )
            else:
                await user.api.messages.edit(
                    peer_id=message.peer_id,
                    conversation_message_id=message.conversation_message_id,
                    message=f"–ù–µ—Ç –æ–Ω–ª–∞–π–Ω-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è."
                )
        else:
            await user.api.messages.edit(
                peer_id=message.peer_id,
                conversation_message_id=message.conversation_message_id,
                message=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ—Å–µ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
            )
            
##############################################################################################################################################
            
@user.on.message(text=['gb –¥–¥ <count:int>'])
async def delete_own_messages(message: Message, count: int):
   if message.from_id == MAIN_ID:
    peer_id = message.peer_id

    user_id = message.from_id

    if count <= 0:
        return

    message_history = await api.messages.get_history(peer_id=peer_id, count=200)
    message_ids_to_delete = []
    deleted_messages_count = 0

    for msg in message_history.items:
        if msg.from_id == user_id:
            message_ids_to_delete.append(str(msg.id))
            deleted_messages_count += 1

        if deleted_messages_count >= count:
            break

    if not message_ids_to_delete:
        return

    try:
        await api.messages.delete(message_ids=",".join(message_ids_to_delete), delete_for_all=1)
    except VKAPIError as e:
        if "Access denied" in str(e):
            pass  

@user.on.message(text=['gb –¥–¥333'])
async def delete_previous_own_messages(message: Message):
   if message.from_id == MAIN_ID:
    user_id = message.from_id
    message_history = await api.messages.get_history(peer_id=message.peer_id, count=3)

    if len(message_history.items) == 3:
        if message_history.items[0].from_id == user_id:
            await api.messages.delete(message_ids=message_history.items[0].id, delete_for_all=1)

###############################################################################################################################################

@user.on.message(text='gb +—á—Å')
async def add_to_blacklist(message: Message):
    if message.from_id == MAIN_ID:
        user_prefixes = []  
        if message.reply_message:

            user_id = message.reply_message.from_id
            banned_users = await user.api.account.get_banned()
            user_info = await user.api.users.get(user_ids=user_id)
            user_data = user_info[0]
            user_name = f"[id{user_data.id}|{user_data.first_name} {user_data.last_name}]"
            if user_id not in banned_users:
                try:
                    await user.api.account.ban(owner_id=user_id)
                    notification_message = "–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫."
                    await user.api.messages.send(user_id=user_id, message=notification_message)

                    await user.api.messages.edit(
                        peer_id=message.peer_id,
                        conversation_message_id=message.conversation_message_id,
                        message=f"{user_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω(–∞) –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫."
                    )
                except VKAPIError as e:
                    error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ VK API –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {e}"
                    await message.answer(error_message)
            else:
                already_in_blacklist_message = f"{user_name} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∞—à–µ–º —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ."
                await message.answer(already_in_blacklist_message)
        elif 'gb +—á—Å' in message.text:
            import re
            mention_pattern = r'\[id(\d+)\|[^]]+\]'
            mentioned_users = re.findall(mention_pattern, message.text)
            for user_id in mentioned_users:
                try:
                    await user.api.account.ban(owner_id=int(user_id))
                    notification_message = "–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–∞."
                    await user.api.messages.send(user_id=int(user_id), message=notification_message)
                except VKAPIError as e:
                    error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ VK API –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {e}"
                    await message.answer(error_message)

#############################################################################################################################################
                                  
@user.on.message(text=['gb —Å–æ—Ç <text>'])
async def send_to_chat(message: Message, text: str):
    chat_id = -205747591

    try:
        random_id = get_random_id()

        if message.reply_message:
            response_message_id = await user.api.messages.send(peer_id=chat_id, message=text, random_id=random_id, forward_messages=[message.reply_message.id])
        else:
            response_message_id = await user.api.messages.send(peer_id=chat_id, message=text, random_id=random_id)   
        await asyncio.sleep(5)
        history = await user.api.messages.get_history(peer_id=chat_id, count=1)

        if history.items:
            response_message_id = history.items[0].id
        else:
            response_message_id = None


        if response_message_id:
            await user.api.messages.send(peer_id=message.peer_id, message='', random_id=get_random_id(), forward_messages=[response_message_id])
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ VK API: {e}")





@user.on.message(text=['gb —Å—É <text>'])
async def send_to_chat(message: Message, text: str):
    chat_id = -219622329
    user_prefixes = []  
    try:
        random_id = get_random_id()

        if message.reply_message:
            response_message_id = await user.api.messages.send(peer_id=chat_id, message=text, random_id=random_id, forward_messages=[message.reply_message.id])
        else:
            response_message_id = await user.api.messages.send(peer_id=chat_id, message=text, random_id=random_id)
        await asyncio.sleep(1)
        history = await user.api.messages.get_history(peer_id=chat_id, count=1)

        if history.items:
            response_message_id = history.items[0].id
        else:
            response_message_id = None


        if response_message_id:
            await user.api.messages.send(peer_id=message.peer_id, message='', random_id=get_random_id(), forward_messages=[response_message_id])
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ VK API: {e}")

#############################################################################################################################################
        
async def –¥–æ–±–∞–≤–∏—Ç—å_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(message: Message, target: str = ""):
    if message.from_id == MAIN_ID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–æ–º
        if message.reply_message:
            await api.messages.delete(message_ids=[message.id], delete_for_all=1)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        target_id = None
        if message.reply_message:
            target_id = message.reply_message.from_id
        elif target.startswith("[id"):
            target_id = int(target.split('|')[0][3:])
        elif target.isdigit():
            target_id = int(target)

        if target_id:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_info = await api.users.get(user_ids=target_id)
                user_data = user_info[0]
                user_name = f"[id{user_data.id}|{user_data.first_name} {user_data.last_name}]"

                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                await api.messages.add_chat_user(chat_id=message.peer_id - 2000000000, user_id=target_id)
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ—Å–µ–¥—É.")
            except VKAPIError as e:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        else:
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            await api.messages.delete(message_ids=[message.id], delete_for_all=1)


        

@user.on.message(text=["gb –∫–∏–∫ <target>", "–≥–± –∫–∏–∫ <target>", "<–≤–∞—à_–ø—Ä–µ—Ñ–∏–∫—Å> –∫–∏–∫ <target>"])
async def kick_user(message: Message, target: str):
    
    if message.from_id == MAIN_ID: 
        if message.reply_message:
            await api.messages.delete(message_ids=[message.id], delete_for_all=1)
            
        target_id = None
        if message.reply_message:
            target_id = message.reply_message.from_id
        elif target.startswith("[id"):
            target_id = int(target.split('|')[0][3:])
        elif target.isdigit():
            target_id = int(target)

        if target_id:
            try:
                user_info = await api.users.get(user_ids=target_id)
                user_data = user_info[0]
                user_name = f"[id{user_data.id}|{user_data.first_name} {user_data.last_name}]"

                await api.messages.remove_chat_user(chat_id=message.peer_id - 2000000000, user_id=target_id)
                await message.answer(f"–ß—É—à–ø–∞–Ω {user_name} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã.")
            except VKAPIError as e:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        else:
            await api.messages.delete(message_ids=[message.id], delete_for_all=1)

##############################################################################################################################################
            
@user.on.message(text='gb +–¥—Ä')
async def add_friend(message: Message):
    if message.from_id == MAIN_ID:
        if message.reply_message:
            user_id = message.reply_message.from_id
            import random
            random_id = random.getrandbits(31) 

            friend_status = await api.friends.are_friends(user_ids=[user_id])

            if friend_status and friend_status[0].friend_status == 3:
                try:
                    await api.friends.add(user_id=user_id, random_id=random_id)
                    success_message = f"–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è –æ—Ç [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞."
                    await api.messages.send(
                        peer_id=message.peer_id,
                        message=success_message,
                        random_id=random_id
                    )
                except VKAPIError as e:
                    error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ VK API –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è: {e}"
                    await api.messages.send(
                        peer_id=message.peer_id,
                        message=error_message,
                        random_id=random_id
                    )
            else:
                try:
                    await api.friends.add(user_id=user_id, random_id=random_id)
                    success_message = f"–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è –æ—Ç [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞."
                    await api.messages.send(
                        peer_id=message.peer_id,
                        message=success_message,
                        random_id=random_id
                    )
                except VKAPIError as e:
                    error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ VK API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è: {e}"
                    await api.messages.send(
                        peer_id=message.peer_id,
                        message=error_message,
                        random_id=random_id
                    )
        else:
            await api.messages.delete(message_ids=[message.id])

##############################################################################################################################################
@user.on.message(text='gb -–¥—Ä')
async def remove_friend(message: Message):
   if message.from_id == MAIN_ID:
    if message.reply_message:
        user_id = message.reply_message.from_id
        friend_status = await api.friends.are_friends(user_ids=[user_id])

        if friend_status and friend_status[0].friend_status != 3:
            not_friend_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id{user_id}|id{user_id}] –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π."
            await api.messages.edit(
                peer_id=message.peer_id,
                conversation_message_id=message.conversation_message_id,
                message=not_friend_message
            )
        else:
            try:
                await api.friends.delete(user_id=user_id)
                success_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id{user_id}|id{user_id}] —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –¥—Ä—É–∑–µ–π."
                await api.messages.edit(
                    peer_id=message.peer_id,
                    conversation_message_id=message.conversation_message_id,
                    message=success_message
                )
            except VKAPIError as e:
                error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ VK API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}"
                await api.messages.edit(
                    peer_id=message.peer_id,
                    conversation_message_id=message.conversation_message_id,
                    message=error_message
                )
    else:
        await api.messages.delete(message_ids=[message.id])   

##############################################################################################################################################



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–∞
def get_gender_string(sex):
    if sex == 1:
        return '–ñ–µ–Ω—Å–∫–∏–π'
    elif sex == 2:
        return '–ú—É–∂—Å–∫–æ–π'
    else:
        return '–ù–µ —É–∫–∞–∑–∞–Ω'

def format_account_age(delta):
    years, months, days = delta.years, delta.months, delta.days
    hours = delta.hours

    if days == 1:
        days_text = "1 –¥–µ–Ω—å"
    elif days % 10 in {2, 3, 4} and days not in {12, 13, 14}:
        days_text = f"{days} –¥–Ω—è"
    else:
        days_text = f"{days} –¥–Ω–µ–π"

    if hours == 1:
        hours_text = "1 —á–∞—Å"
    elif hours % 10 in {2, 3, 4} and hours not in {12, 13, 14}:
        hours_text = f"{hours} —á–∞—Å–∞"
    else:
        hours_text = f"{hours} —á–∞—Å–æ–≤"

    years_text = f"{years} {'–≥–æ–¥' if years == 1 else '–≥–æ–¥–∞' if 2 <= years <= 4 else '–ª–µ—Ç'}"
    months_text = f"{months} {'–º–µ—Å—è—Ü' if months == 1 else '–º–µ—Å—è—Ü–∞' if 2 <= months <= 4 else '–º–µ—Å—è—Ü–µ–≤'}"

    age_text = f"{years_text} {months_text} {days_text}."

    return age_text

def format_timedelta(delta):
    days = delta.days
    hours, remainder = divmod(delta.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    if days > 0:
        return f"{days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"
    elif hours > 0:
        return f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"
    elif minutes > 0:
        return f"{minutes} –º–∏–Ω—É—Ç"
    else:
        return f"{seconds} —Å–µ–∫—É–Ω–¥"

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "gb –ø—Ä–æ–≤–µ—Ä—å –∞–π–¥–∏"






@user.on.message(text=["gb –∏–Ω—Ñ–æ", "–≥–± –∏–Ω—Ñ–æ", "<–≤–∞—à_–ø—Ä–µ—Ñ–∏–∫—Å> –∏–Ω—Ñ–æ"])
async def remove_trusted_33user(message: Message):
   command_prefixes = ["gb", "–≥–±", "<–≤–∞—à_–ø—Ä–µ—Ñ–∏–∫—Å>"]
   if message.from_id == MAIN_ID:
 # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞
       prefixes = load_prefixes()
       user_prefixes = prefixes.get(str(message.from_id), ["gb"])  # –ï—Å–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º "gb" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
   for prefix in user_prefixes + command_prefixes:
      if message.text.startswith(prefix + " –∏–Ω—Ñ–æ"):

        try:
            if message.reply_message:
                user_id = message.reply_message.from_id
            else:
                user_id = message.from_id

            user_info = await api.users.get(
                user_ids=user_id,
                fields=['online', 'last_seen', 'photo_max', 'screen_name', 'sex', 'city', 'bdate', 'music', 'video', 'followers_count', 'is_closed', 'counters']
            )

            user_data = user_info[0]
            user_name = f"{user_data.first_name} {user_data.last_name}"
            user_screen_name = user_data.screen_name
            user_sex = get_gender_string(user_data.sex)
            user_city = user_data.city
            user_city_title = user_city.title if user_city else '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'
            user_bdate = user_data.bdate if 'bdate' in user_data else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

            if hasattr(user_data.counters, 'videos'):
                user_video_count = user_data.counters.videos
            else:
                user_video_count = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

            if hasattr(user_data.counters, 'photos'):
                user_photos_count = user_data.counters.photos
            else:
                user_photos_count = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

            if hasattr(user_data.counters, 'friends'):
                friends_count = user_data.counters.friends
            else:
                friends_count = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
                
            user_info = await api.users.get(
                user_ids=user_id,
                fields=['activity', 'counters', 'followers_count', 'last_seen'],
            )
            user_data = user_info[0]

            user_status = getattr(user_data, 'activity', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–µ')

            sticker_packs_count = user_data.activity.stickers if hasattr(user_data.activity, 'stickers') else 0

            if sticker_packs_count == 0:
                counters = user_data.counters
                sticker_packs_count = counters.sticker_packs if hasattr(counters, 'sticker_packs') else 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö
            if hasattr(counters, 'gifts') and counters.gifts is not None:
                gifts_count = counters.gifts
            else:
                gifts_count = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö —Å–∫—Ä—ã—Ç–∞.'

            followers_count = getattr(user_data, 'followers_count', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

            last_seen = user_data.last_seen
            if user_data.online:
                online_status = "üü¢ –û–Ω–ª–∞–π–Ω"
                if last_seen and last_seen.platform:
                    online_device = last_seen.platform
                    if online_device == 1:
                        device_name = "—Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ üì±"
                    elif online_device == 2:
                        device_name = "—Å iPhone üì±"
                    elif online_device == 3:
                        device_name = "—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ üñ•Ô∏è"
                    else:
                        device_name = "—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ üìµ"
                    online_status += f" {device_name}"
                last_seen_str = ""
            else:
                online_status = "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
                if last_seen and last_seen.time:
                    last_seen_time = datetime.utcfromtimestamp(last_seen.time)
                    now = datetime.utcnow()
                    time_difference = now - last_seen_time
                    last_seen_str = (
                        f"–≤ —Å–µ—Ç–∏: {last_seen_time.strftime('%Y-%m-%d %H:%M:%S')} "
                        f"‚îú‚îÄ {format_timedelta(time_difference)} –Ω–∞–∑–∞–¥"
                    )
                else:
                    last_seen_str = "–ë—ã–ª –≤ —Å–µ—Ç–∏ –¥–∞–≤–Ω–æ"

            sticker_packs_count = user_data.activity.stickers if hasattr(user_data.activity, 'stickers') else 0

            if sticker_packs_count == 0:
                counters = user_data.counters
                sticker_packs_count = counters.sticker_packs if hasattr(counters, 'sticker_packs') else 0

                    
            bot_info = await api.users.get(
                user_ids=message.from_id
            )
            bot_data = bot_info[0]
            bot_id = bot_data.id

            is_bot_connected = user_id == bot_id
            

            response = requests.get(f'https://vk.com/foaf.php?id={user_id}')
            xml = response.text
            soup = BeautifulSoup(xml, 'lxml')
            created = soup.find('ya:created').get('dc:date')

            created_date = datetime.strptime(created, "%Y-%m-%dT%H:%M:%S%z")
            formatted_created_date = created_date.strftime("%Y.%m.%d –≤ %H:%M –º—Å–∫")

            response = requests.get(f'https://vk.com/foaf.php?id={user_id}')
            xml = response.text
            soup = BeautifulSoup(xml, 'lxml')
            created = soup.find('ya:created').get('dc:date')

            created_date = datetime.strptime(created, "%Y-%m-%dT%H:%M:%S%z")
            created_date = created_date.replace(tzinfo=None)

            delta = relativedelta(datetime.now(), created_date) # type: ignore
            total_days = delta.years * 365 + delta.months * 30 + delta.days

            account_age = format_account_age(delta)


            response_message = f"üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {user_name} :\n"
            response_message += f"üìå ID: {user_id}\n"
            response_message += f"üîó –°—Å—ã–ª–∫–∞: {user_screen_name}\n"
            response_message += f"{online_status} {last_seen_str}\n"
            response_message += f"üë§ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {user_data.followers_count - friends_count if user_data.followers_count is not None else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
            response_message += f"üíº –¢–∏–ø –ü—Ä–æ—Ñ–∏–ª—è: {'–ó–∞–∫—Ä—ã—Ç—ã–π' if user_data.is_closed else '–û—Ç–∫—Ä—ã—Ç—ã–π'}\n"
            response_message += f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π: {friends_count}\n"
            response_message += f"‚ö§  –ü–æ–ª: {user_sex}\n"
            response_message += f"üåá –ì–æ—Ä–æ–¥: {user_city_title}\n"
            response_message += f"üé¨ –í–∏–¥–µ–æ: {user_video_count}\n"
            response_message += f"üì∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {user_photos_count}\n"
            response_message += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {formatted_created_date}\n"
            response_message += f"‚è≥ –ê–∫–∫–∞—É–Ω—Ç—É: {account_age} ({total_days} –¥–Ω–µ–π {delta.hours} —á–∞—Å–æ–≤).\n"
            response_message += f"üî∏ –°—Ç–∞—Ç—É—Å:\n{user_status}\n"
            response_message += f"üéÅ –ü–æ–¥–∞—Ä–∫–∏: {gifts_count}\n"
            response_message += f"üéÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: {sticker_packs_count}\n"
            response_message += f"                                             \n"
            response_message += f"üë®üèª‚Äçüíª GB: {'‚úÖ' if is_bot_connected else '‚úñÔ∏è'}\n"
          
            try:
                photo_info = await api.photos.get(
                    owner_id=user_id,
                    album_id='profile',
                    rev=1,
                    count=1,
                    photo_sizes=1,
                )
                
                if photo_info.count > 0:
                    random_id = int(time.time() * 1000)
                    attachment = [f"photo{photo_info.items[0].owner_id}_{photo_info.items[0].id}"]
                else:
                    attachment = []
                
            except VKAPIError as e:
                if "This profile is private" in str(e):
                    attachment = []
                else:
                    raise

            await api.messages.edit(
                peer_id=message.peer_id,
                conversation_message_id=message.conversation_message_id,
                message=response_message,
                attachment=attachment, 
            )
            
        except VKAPIError as e:
            if "This profile is private" in str(e):
                response_message = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º, –∏ –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
                await api.messages.send(
                    peer_id=message.peer_id,
                    message=response_message
                )
            else:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ VK API: {e}")


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_prefixes():
    try:
        with open("prefixes.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –≤ —Ñ–∞–π–ª
def save_prefixes(prefixes):
    with open("prefixes.json", "w") as file:
        json.dump(prefixes, file)


@user.on.message(text="gb +–ø—Ä–µ—Ñ <prefix>")
async def add_prefix(message: Message, prefix: Optional[str]):
    print("Add prefix command received")  
    if not prefix:
        await user.api.messages.edit(
            peer_id=message.peer_id,
            message_id=message.id,
            message="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å."
        )
        return

    if prefix.lower() in ["gb", "–≥–±"]:
        await user.api.messages.edit(
            peer_id=message.peer_id,
            message_id=message.id,
            message=f"–ü—Ä–µ—Ñ–∏–∫—Å {prefix} —è–≤–ª—è–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω."
        )
        return

    prefixes = load_prefixes()
    user_prefixes = prefixes.get(str(message.from_id), [])  

    if prefix.lower() not in map(str.lower, user_prefixes):  
        user_prefixes.append(prefix.lower())  
        prefixes[str(message.from_id)] = user_prefixes
        save_prefixes(prefixes)

        await user.api.messages.edit(
            peer_id=message.peer_id,
            message_id=message.id,
            message=f"–ü—Ä–µ—Ñ–∏–∫—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: {prefix}"
        )
    else:
        await user.api.messages.edit(
            peer_id=message.peer_id,
            message_id=message.id,
            message=f"–ü—Ä–µ—Ñ–∏–∫—Å {prefix} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        )


@user.on.message(text="gb –ø—Ä–µ—Ñ <index>")
async def set_custom_prefix(message: Message, index: Optional[str]):
    if index is None:
        # –í–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
        return

    prefixes = load_prefixes()
    user_prefixes = prefixes.get(str(message.from_id), [])  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try:
        index = int(index)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    except ValueError:
        # –í–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
        return

    if 1 <= index <= len(user_prefixes):
        selected_prefix = user_prefixes[index - 1]
        prefixes[str(message.from_id)] = [selected_prefix.lower()]  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
        save_prefixes(prefixes)

        await user.api.messages.edit(
            peer_id=message.peer_id,
            message_id=message.id,
            message=f"–ü—Ä–µ—Ñ–∏–∫—Å: {selected_prefix} –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        )
    else:
        # –í–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
        return

@user.on.message(text=["gb –ø—Ä–µ—Ñ—ã"])
async def show_prefixes(message: Message):
    if message.from_id == MAIN_ID: 
        prefixes = load_prefixes()
        user_prefixes = prefixes.get(str(message.from_id), ["gb"])  
        trusted_users = load_trusted_users()  
        if message.from_id == YOUR_USER_ID and any(message.text.lower().startswith(prefix.lower()) for prefix in user_prefixes + ["gb"]):  
            prefixes = load_prefixes()
            user_prefixes = prefixes.get(str(message.from_id), [])  

    if not user_prefixes:
        response = "–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤."
    else:
        response = "–í–∞—à–∏ –ª–∏—á–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã:\n" + "\n".join([f"{index + 1}. {prefix}" for index, prefix in enumerate(user_prefixes) if prefix.lower() not in ["gb", "–≥–±"]])

    await user.api.messages.edit(
        peer_id=message.peer_id,
        message_id=message.id,
        message=response
    )




@user.on.message(text=["gb -–ø—Ä–µ—Ñ—ã", "gb -–ø—Ä–µ—Ñ—ã"])
async def clear_prefixes(message: Message):
    prefixes = load_prefixes()
    user_prefixes = prefixes.get(str(message.from_id), ["gb"])  
    if message.from_id == YOUR_USER_ID and any(message.text.lower().startswith(prefix.lower()) for prefix in user_prefixes + ["gb"]):
     prefixes = load_prefixes()
    user_id = str(message.from_id)

    if user_id in prefixes:
        del prefixes[user_id]  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_prefixes(prefixes)

        await user.api.messages.edit(
            peer_id=message.peer_id,
            message_id=message.id,
            message="–í–∞—à–∏ –ø—Ä–µ—Ñ–∏–∫—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã."
        )
    else:
        await user.api.messages.edit(
            peer_id=message.peer_id,
            message_id=message.id,
            message="–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤."
        )



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ø—Ä–µ—Ñ" –∏ "–ø—Ä–µ—Ñ–∏–∫—Å"

async def show_current_prefix(user, message: Message):
    prefixes = load_prefixes()
    user_prefixes = prefixes.get(str(message.from_id), ["gb"])

    await user.api.messages.edit(
        peer_id=message.peer_id,
        message_id=message.id,
        message=f"‚ö† –•–æ–∑—è–∏–Ω –≤–∞—à –ü—Ä–µ—Ñ–∏–∫—Å: {user_prefixes[0]}"
    )
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "gb -–ø—Ä–µ—Ñ <index>"
@user.on.message(text="gb -–ø—Ä–µ—Ñ <index>")
async def remove_prefix(message: Message, index: Optional[str]):
    if index is None:
        await user.api.messages.edit(
            peer_id=message.peer_id,
            message_id=message.id,
            message="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ—Ñ–∏–∫—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å."
        )
        return

    prefixes = load_prefixes()
    user_prefixes = prefixes.get(str(message.from_id), [])  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try:
        index = int(index)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    except ValueError:
        await user.api.messages.edit(
            peer_id=message.peer_id,
            message_id=message.id,
            message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–µ—Ñ–∏–∫—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."
        )
        return

    if 1 <= index <= len(user_prefixes):
        removed_prefix = user_prefixes.pop(index - 1)  # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑ —Å–ø–∏—Å–∫–∞
        prefixes[str(message.from_id)] = user_prefixes
        save_prefixes(prefixes)

        await user.api.messages.edit(
            peer_id=message.peer_id,
            message_id=message.id,
            message=f"–ü—Ä–µ—Ñ–∏–∫—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: {removed_prefix}"
        )
    else:
        await user.api.messages.edit(
            peer_id=message.peer_id,
            message_id=message.id,
            message="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–µ—Ñ–∏–∫—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä."
        )



        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "gb –ø—Ä–æ–≤–µ—Ä—å –∞–π–¥–∏"
@user.on.message(text=['gb –ø—Ä–æ–≤–µ—Ä—å –∞–π–¥–∏'])
async def check_user_id(message: Message):
    if message.reply_message:
        # –ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª –¥–∞–Ω –æ—Ç–≤–µ—Ç
        user_id = message.reply_message.from_id
        user_link = f"[id{user_id}|id –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ]"
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ–º –≤–∞—à –∞–π–¥–∏
        user_id = message.from_id
        user_link = f"[id{user_id}|–í–∞—à id ]"

    if user_id:
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–π–¥–∏ –∏ —Å—Å—ã–ª–∫–æ–π
        response_message = f"{user_link} : {user_id}"
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º
        await api.messages.edit(
            peer_id=message.peer_id,
            conversation_message_id=message.conversation_message_id,
            message=response_message
        )
    else:
        # –ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        await message.answer("–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "—Ä–µ—à–∏"
@user.on.message(text=["gb —Ä–µ—à–∏ <expression>"])
async def solve_expression(message: Message, expression: str):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–π–¥–∏—à–Ω–∏–∫
    if message.from_id == MAIN_ID:
        try:
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            result = eval(expression)
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            await api.messages.edit(
                peer_id=message.peer_id,
                conversation_message_id=message.conversation_message_id,
                message=f"–†–µ–∑—É–ª—å—Ç–∞—Ç = {result}"
            )
        except Exception as e:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
            await api.messages.edit(
                peer_id=message.peer_id,
                conversation_message_id=message.conversation_message_id,
                message="–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
            )
           
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "gb –ø–∏–Ω–≥"
@user.on.message(text=['gb –ø–∏–Ω–≥'])
async def ping_pong(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    current_time = datetime.now()
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
    response_time = (current_time - datetime.fromtimestamp(message.date)).total_seconds()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    response_text = f'–ü–∏–Ω–≥ –±–æ—Ç–∞: {response_time:.2f} —Å–µ–∫—É–Ω–¥'
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
    await api.messages.edit(
        peer_id=message.peer_id,
        conversation_message_id=message.conversation_message_id,
        message=response_text
    )
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É
def get_gender_string(gender):
    if gender == 1:
        return "–∂–µ–Ω—Å–∫–∏–π"
    elif gender == 2:
        return "–º—É–∂—Å–∫–æ–π"
    else:
        return "–Ω–µ —É–∫–∞–∑–∞–Ω"
    
# –°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
device_descriptions = {
    1: "—Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ",
    2: "—Å iPhone",
    3: "—Å iPad",
    4: "—Å Android",
    5: "—Å Windows Phone",
    6: "—Å Windows 10",
    7: "—Å –ü–ö",
    8: "—Å VK Mobile"
   } 
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–∞
def get_gender_string(sex):
    if sex == 1:
        return '–ñ–µ–Ω—Å–∫–∏–π'
    elif sex == 2:
        return '–ú—É–∂—Å–∫–æ–π'
    else:
        return '–ù–µ —É–∫–∞–∑–∞–Ω'

        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "gb –ø—Ä–æ—Ñ–∏–ª—å"
@user.on.message(text='gb –ø—Ä–æ—Ñ–∏–ª—å')
async def get_user_profile(message: Message):
    try:
        if message.reply_message:
            user_id = message.reply_message.from_id
        else:
            user_id = message.from_id

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –≤–∫–ª—é—á–∞—è –≥–æ—Ä–æ–¥ –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        user_info = await api.users.get(
            user_ids=user_id,
            fields=['online', 'last_seen', 'photo_max', 'screen_name', 'sex', 'city', 'bdate', 'music', 'videos', 'followers_count', 'is_closed', 'counters']
        )

        user_data = user_info[0]
        user_name = f"{user_data.first_name} {user_data.last_name}"
        user_id = user_data.id
        user_link = f"https://vk.com/{user_data.screen_name}"
        user_sex = get_gender_string(user_data.sex)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É
        user_city = user_data.city.title if 'city' in user_data else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'  # –ì–æ—Ä–æ–¥
        user_bdate = user_data.bdate if 'bdate' in user_data else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'  # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        user_music_count = user_data.music.count if 'music' in user_data else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É–∑—ã–∫–∏
        user_video_count = user_data.videos.count if 'videos' in user_data else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_photos_count = user_data.counters.photos

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = requests.get(f'https://vk.com/foaf.php?id={user_id}')
        xml = response.text
        soup = BeautifulSoup(xml, 'lxml')
        created = soup.find('ya:created').get('dc:date')

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        created_date = datetime.strptime(created, "%Y-%m-%dT%H:%M:%S%z")
        formatted_created_date = created_date.strftime("%Y.%m.%d –≤ %H:%M –º—Å–∫")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        friends_info = await api.friends.get(user_id=user_id)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π
        friends_count = friends_info.count
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        followers_count = user_data.followers_count

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
        online_device = "üìµ"
        if user_data.online:
            if user_data.online_mobile:
                online_device = "üì±"
            else:
                online_device = "üñ•Ô∏è"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        response_message = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
        response_message += f"üìå ID: {user_id}\n"
        response_message += f"üîó –°—Å—ã–ª–∫–∞: {user_link}\n"
        response_message += f"üåê –û–Ω–ª–∞–π–Ω: {'–î–∞' if user_data.online else '–ù–µ—Ç'} {online_device}\n"
        response_message += f"üë§ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {followers_count - friends_count if followers_count is not None else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        response_message += f"üîí –ó–∞–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {'–î–∞' if user_data.is_closed else '–ù–µ—Ç'}\n"
        response_message += f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π: {friends_count}\n"
        response_message += f"üè≥‚Äçüåà –ü–æ–ª: {user_sex}\n"
        response_message += f"üèô –ì–æ—Ä–æ–¥: {user_city}\n"
        response_message += f"üéµ –ú—É–∑—ã–∫–∏: {user_music_count}\n"
        response_message += f"üì∫ –í–∏–¥–µ–æ: {user_video_count}\n"
        response_message += f"üìÜ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_bdate}\n"
        response_message += f"üì∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {user_photos_count}\n"  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        response_message += f"üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {formatted_created_date}\n"

        await api.messages.edit(
            peer_id=message.peer_id,
            conversation_message_id=message.conversation_message_id,
            message=response_message
        )
    except VKAPIError as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ VK API: {e}")

        
        
        
        
        
        
        
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "gb –ø–µ—Ä–µ–≤–µ–¥–∏"
@user.on.message(text='gb –ø–µ—Ä–µ–≤–µ–¥–∏')
async def translate_text(message: Message):
    try:
        text_to_translate = ""

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        if message.reply_message and message.reply_message.text:
            text_to_translate = message.reply_message.text
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            match = re.search(r'gb –ø–µ—Ä–µ–≤–µ–¥–∏ (.+)', message.text)
            if match:
                text_to_translate = match.group(1)

        if text_to_translate:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            source_lang = 'ru' if re.search('[–∞-—è–ê-–Ø]', text_to_translate) else 'en'
            target_lang = 'en' if source_lang == 'ru' else 'ru'

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
            translated_text = translator.translate(text_to_translate, src=source_lang, dest=target_lang)

            response_message = f"–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞:\n{translated_text.text}"
        else:
            response_message = "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã 'gb –ø–µ—Ä–µ–≤–µ–¥–∏' –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞."

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
        await api.messages.edit(
            peer_id=message.peer_id,
            message_id=message.id,
            message=response_message
        )
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}") 
        
        
        
        
        
        

        

                        



        


#–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
logger.debug('________________\n')
logger.debug(' –°–¢–ê–†–¢ –ì–ë')
logger.debug('________________')
user.run_forever()













