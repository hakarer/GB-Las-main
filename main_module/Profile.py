import orjson
import random
from config import TOKEN,api_list
from main_module.main_function import *
from rules import From_Me,Prefix
from datetime import datetime
import time
from bs4 import BeautifulSoup
import random, requests
from dateutil.relativedelta import relativedelta
from vkbottle import VKAPIError


profile_labeler = UserLabeler()
profile_labeler.vbml_ignore_case = True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–∞
async def get_gender_string(sex):
    if sex == 1:
        return 'üíã –ü–æ–ª: –ñ–µ–Ω—Å–∫–∏–π'
    elif sex == 2:
        return 'üçå –ü–æ–ª: –ú—É–∂—Å–∫–æ–π'
    else:
        return '‚ùì –ü–æ–ª: –ù–µ —É–∫–∞–∑–∞–Ω'

async def format_account_age(delta):
    years, months, days = delta.years, delta.months, delta.days
    hours = delta.hours

    if days == 1:
        days_text = "1 –¥."
    elif days % 10 in {2, 3, 4} and days not in {12, 13, 14}:
        days_text = f"{days} –¥."
    else:
        days_text = f"{days} –¥–Ω."

    if hours == 1:
        hours_text = "1 —á."
    elif hours % 10 in {2, 3, 4} and hours not in {12, 13, 14}:
        hours_text = f"{hours} —á."
    else:
        hours_text = f"{hours} —á."

    years_text = f"{years} {'–≥.' if years == 1 else '–≥.' if 2 <= years <= 4 else '–≥.'}"
    months_text = f"{months} {'–º–µ—Å.' if months == 1 else '–º–µ—Å.' if 2 <= months <= 4 else '–º–µ—Å.'}"

    age_text = f"{years_text} {months_text} {days_text}"

    return age_text

async def format_timedelta(delta):
    days = delta.days
    hours, remainder = divmod(delta.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    if days > 0:
        return f"{days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"
    elif hours > 0:
        return f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"
    elif minutes > 0:
        return f"{minutes} –º–∏–Ω—É—Ç"
    else:
        return f"{seconds} —Å–µ–∫—É–Ω–¥"




        
@profile_labeler.message(From_Me(), Prefix(), text=['<pref>+–¥—Ä', '<pref>+–¥—Ä <link>'])
async def manage_friends(message: Message, link: str = None):
    user_id = message.reply_message.from_id if message.reply_message else await get_id(message=message, text=link)
    if not user_id:
        return await mess_new(message=message, text="‚ö† ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", red=True)
    try:
        random_id = random.getrandbits(31)
        user_info = await api.users.get(user_ids=user_id)
        user_name = f"{user_info[0].first_name} {user_info[0].last_name}"
        friend_status = (await api.friends.are_friends(user_ids=[user_id]))[0].friend_status

        if friend_status == 3:
            await mess_new(message=message, text=f" [id{user_id}|{user_name}] —É–∂–µ —É –≤–∞—Å –≤ –¥—Ä—É–∑—å—è—Ö.", red=True)
        else:
            await api.friends.add(user_id=user_id, random_id=random_id)
            if friend_status == 2:
                await mess_new(message=message, text=f"–ó–∞—è–≤–∫–∞ –æ—Ç [id{user_id}|{user_name}] –ø—Ä–∏–Ω—è—Ç–∞.", red=True)
            else:
                await mess_new(message=message, text=f"–ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è [id{user_id}|{user_name}] –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.", red=True)
    except VKAPIError as e:
        if "blacklist" in str(e):
            await mess_new(message=message, text=f"‚ö† –û—à–∏–±–∫–∞ : [id{user_id}|{user_name}] –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ —á—Å", red=True)
        else:
            await mess_new(message=message, text=f"‚ö† –û—à–∏–±–∫–∞: {e}", red=True)
###########################################################

@profile_labeler.message(From_Me(), Prefix(), text=['<pref>-–¥—Ä', '<pref>-–¥—Ä <link>'])
async def remove_friend(message: Message, link: str = None):
    user_id = message.reply_message.from_id if message.reply_message else await get_id(message=message, text=link)

    if not user_id:
        return await mess_new(message=message, text="‚ö† ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", red=True)

    try:
        user_info = await api.users.get(user_ids=user_id)
        user_name = f"{user_info[0].first_name} {user_info[0].last_name}"

        friend_status = (await api.friends.are_friends(user_ids=[user_id]))[0].friend_status

        if friend_status == 0:
            await mess_new(message=message, text=f"‚ö† [id{user_id}|{user_name}] —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º –¥—Ä—É–≥–æ–º.", red=True)
        elif friend_status == 3:
            await api.friends.delete(user_id=user_id)
            await mess_new(message=message, text=f"[id{user_id}|{user_name}] —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –¥—Ä—É–∑–µ–π.", red=True)
        else:
            await mess_new(message=message, text=f"‚ö† –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å [id{user_id}|{user_name}] –∏–∑ –¥—Ä—É–∑–µ–π, –ø–æ—Å–∫–æ–ª—å–∫—É –ï–≥–æ(–ï—ë) –∑–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –∂–¥–µ—Ç –≤–∞—à–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è .", red=True)
    except VKAPIError as e:
        if "blacklist" in str(e):
            await mess_new(message=message, text=f"‚ö† –û—à–∏–±–∫–∞ : [id{user_id}|{user_name}] –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ —á—Å", red=True)
        else:
            await mess_new(message=message, text=f"‚ö† –û—à–∏–±–∫–∞: {e}", red=True)
###########################################################

@profile_labeler.message(From_Me(),Prefix(),text=['<pref>–∞–π–¥–∏', '<pref>–∞–π–¥–∏ <link>','<pref>id', '<pref>id <link>','<pref>fqlb', '<pref>fqlb <link>','<pref>—à–≤', '<pref>—à–≤ <link>'])
@error
async def user_id_check(message: Message,link: str = None):
    
    user_id = await get_id(message=message, text=link)

    try:
        if user_id:
            await mess_new(message=message, text=f"üÄÑ ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}",red=True)
        else:
            await mess_new(message=message, text=f"‚ö† ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",red=True)
    except:
        await mess_new(message=message, text=f"‚ö† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ.",red=True)
###########################################################

@profile_labeler.message(From_Me(),Prefix(),text=['<pref>–ø—Ä–æ—Ñ–∏–ª—å','<pref>–ø—Ä–æ—Ñ–∏–ª—å <link> <link2>','<pref>–∏–Ω—Ñ–æ <link> <link2>','<pref>–ø—Ä–æ—Ñ–∏–ª—å <link>','<pref>–∏–Ω—Ñ–æ <link>','<pref>–∏–Ω—Ñ–æ',])
@error
async def profile(message: Message, link: str=None, link2: str=None):
    try:
        podr=False
        if link!=None:
            if link=="–ø–æ–¥—Ä–æ–±–Ω–æ":
                podr=True
                link=link2
        if link2!=None:
            if link2=="–ø–æ–¥—Ä–æ–±–Ω–æ":
                podr=True


        user_id = await get_id(message=message, text=link)
        user_info = await user.api.users.get(
            user_ids=user_id,
            fields=['bdate',
                    'online',
                    'last_seen',
                    'photo_max',
                    'screen_name',
                    'sex',
                    'city',
                    'music',
                    'video',
                    'followers_count',
                    'is_closed',
                    'counters']
        )



        user_data = user_info[0]
        user_name = f"{user_data.first_name} {user_data.last_name}"
        user_screen_name = user_data.screen_name
        user_sex = await get_gender_string(user_data.sex)
        user_city = user_data.city
        user_city_title = user_city.title if user_city else '–ù–µ —É–∫–∞–∑–∞–Ω'
        try:
            user_bdate = user_data.bdate
            if user_bdate == None:
                user_bdate = "–°–∫—Ä—ã—Ç–æ"
        except:
            user_bdate = '–°–∫—Ä—ã—Ç–æ'

        if hasattr(user_data.counters, 'videos'):
            user_video_count = user_data.counters.videos
        else:
            user_video_count = '–°–∫—Ä—ã—Ç–æ'

        if hasattr(user_data.counters, 'photos'):
            user_photos_count = user_data.counters.photos
        else:
            user_photos_count = '–°–∫—Ä—ã—Ç–æ'

        if hasattr(user_data.counters, 'friends'):
            friends_count = user_data.counters.friends
        else:
            friends_count = '–°–∫—Ä—ã—Ç–æ'
            
        user_info = await api.users.get(
            user_ids=user_id,
            fields=['activity', 'counters', 'followers_count', 'last_seen'],
        )
        user_data = user_info[0]

        user_status = getattr(user_data, 'activity', '–°–∫—Ä—ã—Ç–æ –æ —Å—Ç–∞—Ç—É—Å–µ')

        sticker_packs_count = user_data.activity.stickers if hasattr(user_data.activity, 'stickers') else 0

        if sticker_packs_count == 0:
            counters = user_data.counters
            sticker_packs_count = counters.sticker_packs if hasattr(counters, 'sticker_packs') else 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö
        if hasattr(counters, 'gifts') and counters.gifts is not None:
            gifts_count = counters.gifts
        else:
            gifts_count = '–°–∫—Ä—ã—Ç—ã.'

        followers_count = getattr(user_data, 'followers_count', '–°–∫—Ä—ã—Ç–æ')

        # last_seen = user_data.last_seen
        # if user_data.online:
        #     online_status = "üü¢ –û–Ω–ª–∞–π–Ω"
        #     if last_seen and last_seen.platform:
        #         online_device = last_seen.platform
        #         if online_device == 1:
        #             device_name = "–ê–Ω–¥—Ä–æ–∏–¥ üì±"
        #         elif online_device == 2:
        #             device_name = "iPhone üì±"
        #         elif online_device == 3:
        #             device_name = "–ü–ö üñ•Ô∏è"
        #         else:
        #             device_name = " –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ üìµ"
        #         online_status += f" {device_name}"
        #     last_seen_str = ""
        # else:
        #     online_status = "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
        #     if last_seen and last_seen.time:
        #         last_seen_time = datetime.utcfromtimestamp(last_seen.time)
        #         now = datetime.utcnow()
        #         time_difference = now - last_seen_time
        #         last_seen_str = (
        #             f"–≤ —Å–µ—Ç–∏: {last_seen_time.strftime('%Y-%m-%d %H:%M:%S')} "
        #             f"‚îú‚îÄ {await format_timedelta(time_difference)} –Ω–∞–∑–∞–¥"
        #         )
        #     else:
        #         last_seen_str = "–ë—ã–ª –≤ —Å–µ—Ç–∏ –¥–∞–≤–Ω–æ"

        # sticker_packs_count = user_data.activity.stickers if hasattr(user_data.activity, 'stickers') else 0

        # if sticker_packs_count == 0:
        #     counters = user_data.counters
        #     sticker_packs_count = counters.sticker_packs if hasattr(counters, 'sticker_packs') else 0


        

        response = requests.get(f'https://vk.com/foaf.php?id={user_id}')
        xml = response.text
        soup = BeautifulSoup(xml, 'lxml')
        created = soup.find('ya:created').get('dc:date')

        created_date = datetime.strptime(created, "%Y-%m-%dT%H:%M:%S%z")
        formatted_created_date = created_date.strftime("%Y.%m.%d –≤ %H:%M –º—Å–∫")

        response = requests.get(f'https://vk.com/foaf.php?id={user_id}')
        xml = response.text
        soup = BeautifulSoup(xml, 'lxml')
        created = soup.find('ya:created').get('dc:date')

        created_date = datetime.strptime(created, "%Y-%m-%dT%H:%M:%S%z")
        created_date = created_date.replace(tzinfo=None)

        delta = relativedelta(datetime.now(), created_date)
        total_days = delta.years * 365 + delta.months * 30 + delta.days

        account_age = await format_account_age(delta)

        params = {
                'user_id':user_id,
                'type': "stickers",
                'filters':['purchased'],
                }  
        
        response = await api.request("store.getProducts",params)
        response=response['response']
        count=response['count']

        if podr:
            response_message=(
                f"‚öô –ü—Ä–æ—Ñ–∏–ª—å @id0({user_name}):\n\n"

                f"{'üîí  –ü—Ä–æ—Ñ–∏–ª—å: –ó–∞–∫—Ä—ã—Ç—ã–π' if user_data.is_closed else 'üîì –ü—Ä–æ—Ñ–∏–ª—å: –û—Ç–∫—Ä—ã—Ç—ã–π'}\n"
                f"üÄÑ ID: {user_id}\n"
                f"üïâ –¢—ç–≥: @{user_screen_name}\n\n"
                

                f"üçº –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {user_bdate}\n"
                f"{user_sex}\n"
                f"üåè –ì–æ—Ä–æ–¥: {user_city_title}\n\n"

                f"ü´ß –î—Ä—É–∑—å—è: {friends_count}\n"
                f"üßø –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {user_data.followers_count - friends_count if user_data.followers_count is not None else '–°–∫—Ä—ã—Ç–æ'}\n"

                f"üé¨ –í–∏–¥–µ–æ: {user_video_count}\n"
                f"üèû –§–æ—Ç–æ: {user_photos_count}\n"
                f"üéÅ –ü–æ–¥–∞—Ä–∫–∏: {gifts_count}\n"
                f"üí† –°—Ç–∏–∫–µ—Ä—ã: {count}\n\n"

                f"üóìÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {formatted_created_date}\n"
                f"‚è≥ –ê–∫–∫–∞—É–Ω—Ç—É: {account_age} \n"
                f"üïí ({total_days} –¥–Ω–µ–π  {delta.hours} —á–∞—Å–æ–≤).\n\n"
                
                f"{'' if user_status=='' else f'üí≠ –°—Ç–∞—Ç—É—Å: ¬´{user_status}¬ª'}"
            )
        else:
            response_message=(
                f"‚öô –ü—Ä–æ—Ñ–∏–ª—å @id0({user_name}):\n"
                f"üïâ –¢—ç–≥: @{user_screen_name}\n\n"
                

                f"üçº –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {user_bdate}\n"
                f"{user_sex}\n"
                f"üåè –ì–æ—Ä–æ–¥: {user_city_title}\n\n"

                f"ü´ß –î—Ä—É–∑—å—è: {friends_count}\n"
                f"üßø –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {user_data.followers_count - friends_count if user_data.followers_count is not None else '–°–∫—Ä—ã—Ç–æ'}\n"

                f"üéÅ –ü–æ–¥–∞—Ä–∫–∏: {gifts_count}\n"
                f"üí† –°—Ç–∏–∫–µ—Ä—ã: {count}\n\n"

                f"üóìÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {formatted_created_date}\n"
            )

        
        

        



        try:
            photo_info = await api.photos.get(
                owner_id=user_id,
                album_id='profile',
                rev=1,
                count=1,
                photo_sizes=1,
            )
            
            if photo_info.count > 0:
                random_id = int(time.time() * 1000)
                attachment = [f"photo{photo_info.items[0].owner_id}_{photo_info.items[0].id}"]
            else:
                attachment = []
            
        except VKAPIError as e:
            if "This profile is private" in str(e):
                attachment = []
            else:
                raise
        

        await mess_new(message=message,text=response_message,red=True,attachment=attachment)
        
    except VKAPIError as e:
        if "This profile is private" in str(e):
            response_message = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º, –∏ –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
            await api.messages.send(
                peer_id=message.peer_id,
                message=response_message
            )
###########################################################

@profile_labeler.message(From_Me(),Prefix(),text=['<pref>—Å—Ç–∏–∫–∏','<pref>—Å—Ç–∏–∫–∏ <link>'])
@error
async def profile(message: Message, link: str=None, link2: str=None):
        
        user_id = await get_id(message=message, text=link)
        user_info = await user.api.users.get( user_ids=user_id)

        user_data = user_info[0]

        user_name = f"{user_data.first_name}"

        Sticker_list={}

        params = {
                'user_id': user_id,
                'type': "stickers",
                'filters':['purchased'],
                }  
        
        response = await api.request("store.getProducts",params)
        response=response['response']
        count=response['count']
        StickerPacks=response['items']
        for sticker_pack in StickerPacks:
            Sticker_list[sticker_pack['id']]=sticker_pack['purchase_date']
        await sticker_loader(StickerPacks)

        sort_dict= dict(sorted((value, key) for (key,value) in Sticker_list.items()))
        i=0
        while (list(sort_dict.keys()))[i]==0:
            i+=1
        first_sticker =sticker_info[(list(sort_dict.values()))[i]]['name']
        last_sticker =sticker_info[(list(sort_dict.values()))[len(sort_dict)-1]]['name']
        
        (buy_count,free_count,unical_count,
        anim_count,style_count,money,love_author,love_author_count)=await SticerPack.stick_stats(StickerPacks)
        text=(
            f"üëÅ‚Äçüó® @id{user_id}({user_name}) –∏–º–µ–µ—Ç {count} —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫–æ–≤\n\n"

            f"üí∑ –ü–ª–∞—Ç–Ω—ã–µ –ø–∞–∫–∏: {buy_count}\n"
            f"üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–∞–∫–∏: {free_count}\n"
            f"üíé –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞–∫–∏: {unical_count}\n\n"

            f"üí† –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–∫–∏: {anim_count}\n"
            f"üé≠ –°—Ç–∏–ª–∏ –¥–ª—è –ø–∞–∫–æ–≤:  {style_count}\n"
            f"üë®‚Äçüé® –õ—é–±–∏–º—ã–π –∞–≤—Ç–æ—Ä: {love_author} ({love_author_count})\n\n"

            f"üî∂ –ü–µ—Ä–≤—ã–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–∞–∫: {first_sticker}\n"
            f"üî∑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–∞–∫: {last_sticker}\n\n"

            f"üê© –¶–µ–Ω–∞ –≤ –≥–æ–ª–æ—Å–∞—Ö: {money}\n"
            f"üëë –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö: {money*7} ‚ÇΩ\n"
        )

        await mess_new(message=message,text=text,red=True)
###########################################################

class SticerPack:
    '''–û–ë–™–ï–ö–¢'''

    def __init__(self):
        self.id=0
        self.name=''
        self.autor=''
        self.price=0

        self.free=False
        self.unic=False
        self.don=False

        self.anim=False
        self.style=False
    

    async def stick_stats(items):
        stic_list=[]
        for sticker_pack in items:
            stic_list.append(sticker_pack['id'])

        buy_count=0
        free_count=0
        unical_count=0
        anim_count=0
        style_count=0
        money=0
        author_dict={}
        for x in stic_list:
            dict_stic=sticker_info[x]
            try:
                if dict_stic['don']:
                    buy_count+=1  
            except:
                 pass
            try:
                if dict_stic['free']:
                    free_count+=1 
            except:
                 pass
            try:
                if dict_stic['unic']:
                    unical_count+=1 
            except:
                 pass
            try:
                if dict_stic['anim']:
                    anim_count+=1 
            except:
                 pass
            try:
                if dict_stic['style']:
                    style_count+=1 
            except:
                 pass
            money+=dict_stic['price']
            if dict_stic['author'] in list(author_dict.keys()):
                author_dict[dict_stic['author']]+=1
            else: author_dict[dict_stic['author']]=1


        
        sort_dict= dict(sorted((value, key) for (key,value) in author_dict.items()))
        love_author=(list(sort_dict.values()))[len(sort_dict)-1]
        love_author_count=author_dict[love_author]
        return (buy_count,free_count,unical_count,
                anim_count,style_count,money,love_author,love_author_count)
            
"""–ü–æ–¥–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤"""
async def sticker_loader(items):
        global sticker_info
        stick_api = API(token=TOKEN)  
        stic_list=[]
        for sticker_pack in items:
            if sticker_pack['id'] in list(sticker_info.keys()):
                pass
            else:
                stic_list.append(sticker_pack['id'])
        
        if stic_list==[]:
            return
        i=0
        f=300
        StickerPacks=[]
        while i<=len(items):
            if f>=len(items):
                f=len(items)
            params = {
                'type': "stickers",
                'product_ids':stic_list[i:f],
                # 'extended':True,
                }  
            if stic_list[i:f]==[]:
                break
            while True:
                try:
                    response = await stick_api.request("store.getStockItems",params)
                    break
                except:
                    stick_api=await apichange()
            response=response['response']
            StickerPacks+=response['items']


            if i+300>len(items):
                break
            i+=300
            if i+300>=len(items):
                f=len(items)
            else:
                f+=300
        for sticker_pack in StickerPacks:
            product=sticker_pack['product']
            name=product['title']
            author=sticker_pack['author']

            price=0

            free=False
            unic=False
            don=False

            if "free" in list(sticker_pack.keys()):
                if sticker_pack["free"]==1:
                    free=True
                    pass
                else:
                    if "old_price" in list(sticker_pack.keys()):
                        price=sticker_pack["old_price"]
                    elif "price" in list(sticker_pack.keys()):
                        price=sticker_pack["price"]
                    elif "price_buy" in list(sticker_pack.keys()):
                        price=sticker_pack["price_buy"]
                    if "price_str" in list(sticker_pack.keys()):
                        if sticker_pack['price_str']=='–ë–µ—Å–ø–ª–∞—Ç–Ω–æ':
                            free=True
                            
            else:
                if "old_price" in list(sticker_pack.keys()):
                    price=sticker_pack["old_price"]
                elif "price" in list(sticker_pack.keys()):
                    price=sticker_pack["price"]
                elif "price_buy" in list(sticker_pack.keys()):
                    price=sticker_pack["price_buy"]
                if "price_str" in list(sticker_pack.keys()):
                    if sticker_pack['price_str']=='–ë–µ—Å–ø–ª–∞—Ç–Ω–æ':
                        free=True

            if free==False and price>0:
                don=True
            elif free==False and price==0:
                unic=True
            
            # if free==False and price==0:
            #     if sticker_pack['purchase_details']['text']=='–ï–≥–æ –Ω–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å, –Ω–æ\xa0–æ–Ω –º–æ–∂–µ—Ç –≤—ã–ø–∞—Å—Ç—å –ø—Ä–∏\xa0–ø–æ–∫—É–ø–∫–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤\xa0–º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\xa0‚Äî –≤\xa0—Ä–∞–º–∫–∞—Ö –∞–∫—Ü–∏–∏ ¬´–ú–Ω–µ –ø–æ–≤–µ–∑—ë—Ç!¬ª –¥–æ\xa015.03.2025. –ü—Ä–∞–≤–∏–ª–∞: vk.cc/cgzIZ3.':
            #         unic=True
            #     else:
            #         free=True
            

            sticker_info[product['id']]={
                'name':name,
                'author':author,
                'price':price,
                'free':free,
                'unic':unic,
                'don':don
                }
            
        i=0
        f=300
        StickerPacks=[]
        while i<=len(items):
            if f>=len(items):
                f=len(items)
            params = {
                'type': "stickers",
                'product_ids':stic_list[i:f],
                'extended':True,
                }  
            if stic_list[i:f]==[]:
                break
            while True:
                try:
                    response = await stick_api.request("store.getProducts",params)
                    break
                except:
                    stick_api=apichange()

            response=response['response']
            StickerPacks+=response['items']


            if i+300>len(items):
                break
            i+=300
            if i+300>=len(items):
                f=len(items)
            else:
                f+=300
        
        for sticker_pack in StickerPacks:
            anim=False
            style=False
            if "has_animation" in list(sticker_pack.keys()):
                if sticker_pack['has_animation']==1:
                    anim=True
            if "style_sticker_ids" in list(sticker_pack.keys()):
                    style=True

            (sticker_info[sticker_pack['id']])['anim']=anim
            (sticker_info[sticker_pack['id']])['style']=style
        
        return

sticker_info={}

async def apichange():
    try:
        global api_num
        aps=api_list[api_num]
        api_num+=1
        if api_num >= len(api_list):
                api_num=0
        return aps
    except:
        pass